Installing MicroK8s on Ubuntu 24.04


1.  Update package index & upgrade & dependenices

    $ sudo apt update & sudo apt upgrade


2.  Install MicroK8s

    # MicroK8s Installation
    
        $ sudo snap install microk8s --classic

            microk8s (1.30/stable) v1.30.1 from Canonicalâœ“ installed


3.  Join MicroK8s group

    $ sudo usermod -a -G microk8s $USER
    $ newgrp microk8s

    $ mkdir -p ~/.kube
    $ chmod 0700 ~/.kube

    
4.  Check MicroK8s status
    
    $ sudo microk8s status

        microk8s is running
        high-availability: no
          datastore master nodes: 127.0.0.1:19001
          datastore standby nodes: none
        addons:
          enabled:
            dns                  # (core) CoreDNS
            ha-cluster           # (core) Configure high availability on the current node
            helm                 # (core) Helm - the package manager for Kubernetes
            helm3                # (core) Helm 3 - the package manager for Kubernetes
          disabled:
            cert-manager         # (core) Cloud native certificate management
            cis-hardening        # (core) Apply CIS K8s hardening
            community            # (core) The community addons repository
            dashboard            # (core) The Kubernetes dashboard
            gpu                  # (core) Alias to nvidia add-on
            host-access          # (core) Allow Pods connecting to Host services smoothly
            hostpath-storage     # (core) Storage class; allocates storage from host directory
            ingress              # (core) Ingress controller for external access
            kube-ovn             # (core) An advanced network fabric for Kubernetes
            mayastor             # (core) OpenEBS MayaStor
            metallb              # (core) Loadbalancer for your Kubernetes cluster
            metrics-server       # (core) K8s Metrics Server for API access to service metrics
            minio                # (core) MinIO object storage
            nvidia               # (core) NVIDIA hardware (GPU and network) support
            observability        # (core) A lightweight observability stack for logs, traces and metrics
            prometheus           # (core) Prometheus operator for monitoring and logging
            rbac                 # (core) Role-Based Access Control for authorisation
            registry             # (core) Private image registry exposed on localhost:32000
            rook-ceph            # (core) Distributed Ceph storage using Rook
            storage              # (core) Alias to hostpath-storage add-on, deprecated


5.  Check default MicroK8s objects

    $ sudo microk8s kubectl get all -n kube-system
            
        NAME                                          READY   STATUS    RESTARTS   AGE
        pod/calico-kube-controllers-796fb75cc-2lwpf   1/1     Running   0          56s
        pod/calico-node-t5hvr                         1/1     Running   0          56s
        pod/coredns-5986966c54-gltpk                  1/1     Running   0          56s

        NAME               TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                  AGE
        service/kube-dns   ClusterIP   10.152.183.10   <none>        53/UDP,53/TCP,9153/TCP   61s

        NAME                         DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR            AGE
        daemonset.apps/calico-node   1         1         1       1            1           kubernetes.io/os=linux   63s

        NAME                                      READY   UP-TO-DATE   AVAILABLE   AGE
        deployment.apps/calico-kube-controllers   1/1     1            1           63s
        deployment.apps/coredns                   1/1     1            1           61s

        NAME                                                DESIRED   CURRENT   READY   AGE
        replicaset.apps/calico-kube-controllers-796fb75cc   1         1         1       56s
        replicaset.apps/coredns-5986966c54                  1         1         1       56s


6.  Create kubeconfig

    $ sudo microk8s kubectl config view --raw > ~/.kune/config


7.  Use kubectl command

    7.1 Add an Alias

        $ alias kubectl='sudo microk8s kubectl'


    7.2 Install kubectl

        $ mkdir minikube & cd minikube

        # Get latest minikube version
    
            $ version=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
            $ echo $version
        
            v1.30.2

        # Make minikube download url
    
            $ url="https://storage.googleapis.com/kubernetes-release/release/${version}/bin/linux/amd64/kubectl"
            $ echo $url

            $ curl -LO $url

            % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                             Dload  Upload   Total   Spent    Left  Speed
            100 49.0M  100 49.0M    0     0  16.6M      0  0:00:02  0:00:02 --:--:-- 16.6M

            $ chmod +x kubectl

            $ sudo mv kubectl /usr/local/bin/

            $ kubectl version -o yaml

            clientVersion:
              buildDate: "2024-06-11T20:29:44Z"
              compiler: gc
              gitCommit: 39683505b630ff2121012f3c5b16215a1449d5ed
              gitTreeState: clean
              gitVersion: v1.30.2
              goVersion: go1.22.4
              major: "1"
              minor: "30"
              platform: linux/amd64
            kustomizeVersion: v5.0.4-0.20230601165947-6ce0bf390ce3

            The connection to the server localhost:8080 was refused - did you specify the right host or port?


    # get pods

        $ kubectl get pods -n kube-system

            NAME                                         READY   STATUS    RESTARTS   AGE
            calico-kube-controllers-796fb75cc-2lwpf      1/1     Running   0          28m
            calico-node-t5hvr                            1/1     Running   0          28m
            coredns-5986966c54-gltpk                     1/1     Running   0          28m


8.  MicroK8s Addons

    # dns

        $ sudo microk8s enable dns

            Infer repository core for addon dns
            Addon core/dns is already enabled

    # ingress 

        $ sudo microk8s enable ingress

			Infer repository core for addon ingress
			Enabling Ingress
			ingressclass.networking.k8s.io/public created
			ingressclass.networking.k8s.io/nginx created
			namespace/ingress created
			serviceaccount/nginx-ingress-microk8s-serviceaccount created
			clusterrole.rbac.authorization.k8s.io/nginx-ingress-microk8s-clusterrole created
			role.rbac.authorization.k8s.io/nginx-ingress-microk8s-role created
			clusterrolebinding.rbac.authorization.k8s.io/nginx-ingress-microk8s created
			rolebinding.rbac.authorization.k8s.io/nginx-ingress-microk8s created
			configmap/nginx-load-balancer-microk8s-conf created
			configmap/nginx-ingress-tcp-microk8s-conf created
			configmap/nginx-ingress-udp-microk8s-conf created
			daemonset.apps/nginx-ingress-microk8s-controller created
			Ingress is enabled

    # dashboard

		Infer repository core for addon dashboard
		Enabling Kubernetes Dashboard
		Infer repository core for addon metrics-server
		Enabling Metrics-Server
		serviceaccount/metrics-server created
		clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created
		clusterrole.rbac.authorization.k8s.io/system:metrics-server created
		rolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created
		clusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created
		clusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created
		service/metrics-server created
		deployment.apps/metrics-server created
		apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created
		clusterrolebinding.rbac.authorization.k8s.io/microk8s-admin created
		Metrics-Server is enabled
		Applying manifest
		serviceaccount/kubernetes-dashboard created
		service/kubernetes-dashboard created
		secret/kubernetes-dashboard-certs created
		secret/kubernetes-dashboard-csrf created
		secret/kubernetes-dashboard-key-holder created
		configmap/kubernetes-dashboard-settings created
		role.rbac.authorization.k8s.io/kubernetes-dashboard created
		clusterrole.rbac.authorization.k8s.io/kubernetes-dashboard created
		rolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created
		clusterrolebinding.rbac.authorization.k8s.io/kubernetes-dashboard created
		deployment.apps/kubernetes-dashboard created
		service/dashboard-metrics-scraper created
		deployment.apps/dashboard-metrics-scraper created
		secret/microk8s-dashboard-token created
		
		If RBAC is not enabled access the dashboard using the token retrieved with:
		
		microk8s kubectl describe secret -n kube-system microk8s-dashboard-token
		
		Use this token in the https login UI of the kubernetes-dashboard service.
		
		In an RBAC enabled setup (microk8s enable RBAC) you need to create a user with restricted
		permissions as shown in:
		https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md


9.  Dashboard

    # Use default token

        $ kubectl describe secret -n kube-system microk8s-dashboard-token
            
            Name:         microk8s-dashboard-token
            Namespace:    kube-system
            Labels:       <none>
            Annotations:  kubernetes.io/service-account.name: default
                          kubernetes.io/service-account.uid: 70e9f6c6-2422-4479-bb63-7c395a17ef74

            Type:  kubernetes.io/service-account-token

            Data
            ====
            ca.crt:     1123 bytes
            namespace:  11 bytes
            token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IjBYTnJ4S3VGRTFONGF3UDRLVlRYSjByNjlIbHRmS3dwbm92Ni01WjNmMjgifQ...-r46NWtSHWg


    # Create expiration token

        $ kubectl create token default
    
            eyJhbGciOiJSUzI1NiIsImtpZCI6IjBYTnJ4S3VGRTFONGF3UDRLVlRYSjByNjlIbHRmS3dwbm92Ni01WjNmMjgifQ..._4wGaAHmKlz3J5D3g


    # Creat without expiration token

        See another document.


    # Port-forward

        $ kubectl port-forward -n kube-system service/kubernetes-dashboard --address 0.0.0.0 10443:443 &


    # Browse on remote machine  

        In browser URL bar on the remote host, enter 'https://<microk8s IP>:10443/',

        select 'Token', paste token, and login


10. Start, Stop and Uninstall MicroK8s

    # Stop

        $ sudo microk8s stop

    # Uninstall

        $ sudo snap remove microk8s


11.  Expose the dashboard on a local port

    # Edit service

        ---------------------------------------------------------------------------
        kind: Service
        apiVersion: v1
        metadata:
          name: kubernetes-dashboard-nodeport
          namespace: kube-system
          labels:
            k8s-app: kubernetes-dashboard
        spec:
          selector:
            k8s-app: kubernetes-dashboard
          type: NodePort
          ports:
          - name: https
            port: 443
            targetPort: 8443
            nodePort: 30443
            protocol: TCP
        ---------------------------------------------------------------------------

    # Browse on remote machine  

        In browser URL bar on the remote host, enter 'https://<microk8s IP>:30443/',



12. Ref:

    https://microk8s.io/docs/getting-started

    https://askubuntu.com/questions/1350712/how-to-perform-a-port-forward-on-microk8s-and-send-that-process-to-the-backgroun

    https://www.digitalocean.com/community/tutorials/how-to-setup-a-microk8s-kubernetes-cluster-on-ubuntu-22-04


