Install nvidia drivers on Ubuntu


0.  Remove all Nvidia driver and CUDA

    $ sudo apt-get remove --purge '^nvidia-.*'
    $ sudo apt-get remove --purge '^cuda-.*'
    $ sudo apt-get autoremove
    $ sudo apt-get autoclean


1.  Add the graphics drivers PPA

    $ sudo add-apt-repository ppa:graphics-drivers/ppa

    $ sudo apt-get update && sudo apt upgrade


2.  Check display information and available drivers

    # Display info
    
        $ sudo lshw -numeric -C display

          *-display UNCLAIMED
               description: VGA compatible controller
               product: NVIDIA Corporation [10DE:2805]
               vendor: NVIDIA Corporation [10DE]
               physical id: 0
               bus info: pci@0000:01:00.0
               version: a1
               width: 64 bits
               clock: 33MHz
               capabilities: pm msi pciexpress vga_controller cap_list
               configuration: latency=0
               resources: iomemory:400-3ff iomemory:400-3ff memory:82000000-82ffffff memory:4000000000-400fffffff memory:4010000000-4011ffffff ioport:5000(size=128) memory:83000000-8307ffff

    # List available GPU drivers

        $ ubuntu-drivers list

            ubuntu-drivers list
            nvidia-driver-535-server-open, (kernel modules provided by linux-modules-nvidia-535-server-open-generic-hwe-22.04)
            nvidia-driver-535-server, (kernel modules provided by linux-modules-nvidia-535-server-generic-hwe-22.04)
            nvidia-driver-545, (kernel modules provided by nvidia-dkms-545)
            nvidia-driver-535-open, (kernel modules provided by linux-modules-nvidia-535-open-generic-hwe-22.04)
            nvidia-driver-545-open, (kernel modules provided by nvidia-dkms-545-open)
            nvidia-driver-535, (kernel modules provided by linux-modules-nvidia-535-generic-hwe-22.04)


3.  Install Nvidia driver

    # Manually install the driver

        $ sudo apt-get install nvidia-driver-545

    # Reboot 

        $ sudo reboot

    # Show driver status

        $ nvidia-smi

			Thu Jul 25 17:48:21 2024
			+---------------------------------------------------------------------------------------+
			| NVIDIA-SMI 545.29.06              Driver Version: 545.29.06    CUDA Version: 12.3     |
			|-----------------------------------------+----------------------+----------------------+
			| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |
			| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |
			|                                         |                      |               MIG M. |
			|=========================================+======================+======================|
			|   0  NVIDIA GeForce RTX 4060 Ti     Off | 00000000:01:00.0 Off |                  N/A |
			|  0%   37C    P8               5W / 165W |     20MiB / 16380MiB |      0%      Default |
			|                                         |                      |                  N/A |
			+-----------------------------------------+----------------------+----------------------+
			
			+---------------------------------------------------------------------------------------+
			| Processes:                                                                            |
			|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |
			|        ID   ID                                                             Usage      |
			|=======================================================================================|
			|    0   N/A  N/A      1140      G   /usr/lib/xorg/Xorg                            9MiB |
			|    0   N/A  N/A      1215      G   /usr/bin/gnome-shell                          3MiB |
			+---------------------------------------------------------------------------------------+


    # The CUDA version is 12.3, and the cuda-toolkit should match this version.


4.  # Add cuda-keyring
    
    $ export distro=ubuntu2204
    $ export arch=x86_64
    $ wget https://developer.download.nvidia.com/compute/cuda/repos/$distro/$arch/cuda-keyring_1.1-1_all.deb
    $ sudo dpkg -i cuda-keyring_1.1-1_all.deb
    $ sudo apt-get update


5.  Install Nvidia CUDA-Toolkit

    # Ref:
        https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html
        https://developer.nvidia.com/cuda-toolkit-archive


    # Install CUDA-Toolkit

        $ sudo apt-get install cuda-toolkit-12-3
    
        # If you intsall CUDA, it will come with the drivers, but the driver is already installed.


    # Add environment variable

      # Copy the following text to the bottom of the '~/.bashrc' file

        -----------------------------------------------------------------------
        export PATH=/usr/local/cuda/bin:$PATH
        export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH
        -----------------------------------------------------------------------

        $ source ~/.bashrc


    # List CUDA Toolkit

        $ nvcc -V
            
            nvcc: NVIDIA (R) Cuda compiler driver
            Copyright (c) 2005-2023 NVIDIA Corporation
            Built on Tue_Aug_15_22:02:13_PDT_2023
            Cuda compilation tools, release 12.2, V12.2.140
            Build cuda_12.2.r12.2/compiler.33191640_0


    # Test CUDA toolkit

        $ git clone https://github.com/NVIDIA/cuda-samples
        $ cd cuda-samples/Samples/1_Utilities/deviceQuery
        $ make
        $ ./deviceQuery  

            ./deviceQuery Starting...

             CUDA Device Query (Runtime API) version (CUDART static linking)

            Detected 1 CUDA Capable device(s)
            ...
            deviceQuery, CUDA Driver = CUDART, CUDA Driver Version = 12.2, CUDA Runtime Version = 12.2, NumDevs = 1
            Result = PASS


6.  Install cuDNN

    cuDNN: CUDA Deep Neural Network library

    # Ref
        
        https://docs.nvidia.com/deeplearning/cudnn/latest/installation/overview.html
        
        https://developer.nvidia.com/rdp/cudnn-archive
        
        https://developer.nvidia.com/cudnn-downloads?target_os=Linux&target_arch=x86_64&Distribution=Ubuntu&target_version=22.04&target_type=deb_local


    # Install cuDNN package

        $ sudo apt-get update
        $ sudo apt-get install cudnn9-cuda-12


    # Test cuDNN

        $ sudo apt install libfreeimage3 libfreeimage-dev
        $ git clone https://github.com/johnpzh/cudnn_samples_v9
        $ cd cudnn_samples_v9/mnistCUDNN
        $ make clean && make
        $ ./mnistCUDNN

            Executing: mnistCUDNN
            cudnnGetVersion() : 90201 , CUDNN_VERSION from cudnn.h : 90201 (9.2.1)
            Host compiler version : GCC 11.4.0
            ...
            Result of classification: 1 3 5

            Test passed!


6.  Install Nvidia Containerv Toolkit

    # Add Nvidia repository

        $ curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \
          && curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \
            sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
            sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list


    # Install Nvidia Container Toolkit

        $ sudo apt-get update
        $ sudo apt-get install nvidia-container-toolkit


    # Register Nvidia devices with Docker

        $ sudo nvidia-ctk runtime configure --runtime=docker

            INFO[0000] Config file does not exist; using empty config
            INFO[0000] Wrote updated config to /etc/docker/daemon.json
            INFO[0000] It is recommended that docker daemon be restarted.

        $ cat /etc/docker/daemon.json
            
            -------------------------------------------------------------------
            {
                "runtimes": {
                    "nvidia": {
                        "args": [],
                        "path": "nvidia-container-runtime"
                    }
                }
            }
            -------------------------------------------------------------------


    # Restart docker service

        $ sudo systemctl restart docker

    
    # Test

        $ sudo docker run --rm --runtime=nvidia --gpus all nvidia/cuda:12.3.2-base-ubuntu22.04 nvidia-smi

			Thu Jul 25 10:00:23 2024
			+---------------------------------------------------------------------------------------+
			| NVIDIA-SMI 545.29.06              Driver Version: 545.29.06    CUDA Version: 12.3     |
			|-----------------------------------------+----------------------+----------------------+
			| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |
			| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |
			|                                         |                      |               MIG M. |
			|=========================================+======================+======================|
			|   0  NVIDIA GeForce RTX 4060 Ti     Off | 00000000:01:00.0 Off |                  N/A |
			|  0%   38C    P8              11W / 165W |     20MiB / 16380MiB |      0%      Default |
			|                                         |                      |                  N/A |
			+-----------------------------------------+----------------------+----------------------+
			
			+---------------------------------------------------------------------------------------+
			| Processes:                                                                            |
			|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |
			|        ID   ID                                                             Usage      |
			|=======================================================================================|
			+---------------------------------------------------------------------------------------+
